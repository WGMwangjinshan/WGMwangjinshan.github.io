(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{503:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"项目中遇见了师傅使用sass发现这个东西没有接触过，所以以此为基准线开始学习sass的知识。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目中遇见了师傅使用sass发现这个东西没有接触过，所以以此为基准线开始学习sass的知识。"}},[s._v("#")]),s._v(" 项目中遇见了师傅使用sass发现这个东西没有接触过，所以以此为基准线开始学习Sass的知识。")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("啥是Sass？？")])])]),s._v(" "),n("p",[s._v("说到这我们应该先说一些CSS的痛点，假如你需要在div下的a和li两种标签上加上不同的字体颜色，这个时候你就需要写两个语句，然而是使用了sass之后你只需要写一遍重复的代码。当然，Sass的强大之处不止体现在这，还有一些更加强大的功能，下面一一记录。")]),s._v(" "),n("h2",{attrs:{id:"变量的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量的定义"}},[s._v("#")]),s._v(" 变量的定义")]),s._v(" "),n("p",[s._v("在Sass里有一种与Css完全不一样的设计就是Sass内部有"),n("strong",[s._v("变量")]),s._v("这一说，下面是例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$nav-color: #F90;//这个就是变量，用$开头\nnav {\n  $width: 100px;\n  width: $width;\n  color: $nav-color;//使用的时候用$来引用\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("++我们注意上面的nav块内有又定义了一个width变量，这个变量只会在这个块内起作用，在块外不能被引用。++")]),s._v(" "),n("p",[s._v("除了这种用法之外，我们还可以组合使用变量，类似于js中的字符串拼接：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$highlight-color: #F90;//定义变量\n.selected {\n  border: 1px solid $highlight-color;//普通样式+变量样式的使用。\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$highlight-color: #F90;//定义一个变量\n$highlight-border: 1px solid $highlight-color;//在定义另外一个变量的时候引入另外一个变量\n.selected {\n  border: $highlight-border;//调用变量\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("在变量的定义的时候注意一个细节，就是命名的时候-和_效果是一样的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$link-color: blue;\na {\n  color: $link_color;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("++在上例中，$link-color和$link_color其实指向的是同一个变量。++")]),s._v(" "),n("h2",{attrs:{id:"嵌套使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#嵌套使用"}},[s._v("#")]),s._v(" 嵌套使用")]),s._v(" "),n("p",[s._v("嵌套使用我感觉就是让程序员偷懒的，让我们来看一个CSS的代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#content article h1 { color: #333 }\n#content article p { margin-bottom: 1.4em }\n#content aside { background-color: #EEE }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("可以看到我们要重复的获取一个content的ID，假如我们使用Sass的嵌套，是怎么写的呢？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#content {\n  article {\n    h1 { color: #333 }\n    p { margin-bottom: 1.4em }\n  }\n  aside { background-color: #EEE }\n}\n\n /* 编译后 */\n#content article h1 { color: #333 }\n#content article p { margin-bottom: 1.4em }\n#content aside { background-color: #EEE }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("++可以看到Sass的写法可以让Css的代码具有了逻辑性，增加了可读性的同时还能让我们偷个懒，嘿嘿。++")]),s._v(" "),n("p",[n("strong",[s._v("除了这种简单的场景之外，我们可能还会遇见一个有意思的场景，下面一一举例子：")])]),s._v(" "),n("h3",{attrs:{id:"需要给父元素添加自己的样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#需要给父元素添加自己的样式"}},[s._v("#")]),s._v(" 需要给父元素添加自己的样式")]),s._v(" "),n("p",[s._v("其实这种和上面的差不多，只是在子元素样式的同一级加上赋予给父元素的样式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#content {\n  background-color: #f5f5f5;\n  aside { background-color: #eee }\n}\n\n /* 编译后 */\n#content { background-color: #f5f5f5 }\n#content aside { background-color: #eee }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"父选择器的标识符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父选择器的标识符"}},[s._v("#")]),s._v(" 父选择器的标识符&")]),s._v(" "),n("p",[s._v("说这个部分之前先说一下嵌套的Sass是怎么编译成CSS的。例如上面的例子，在将Sass编译的时候其实就是将里面子元素拿出来然后用空格把父子元素的名字隔开，Css里叫这个后代选择器。但是有的时候使用这种空格隔开的方式就不是很理想。如下例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("article a {\n  color: blue;\n  :hover { color: red }\n}\n\n /* 编译后 */\n article a {\n    color:blue\n }\n article a :hover{\n color: red\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("其实我们最初是想对a进行:hover的伪类添加，但是注意编译出来的a和:hover中间有空格，代表是article的所有后代都会加上这个伪类，这是不对的。这个时候就要使用我们的&来清除这个空格，应该如下写：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("article a {\n  color: blue;\n  &:hover { color: red }\n}\n /* 编译后 */\narticle a { color: blue }\narticle a:hover { color: red }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这个时候就实现了我们最初想要的效果。")]),s._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",[s._v("其实&还有另外一个用法，但是我没看懂，如果哪位大佬看懂了，可以在下面评论区教教我，若是我看懂了，也会在评论区给上自己的理解！！！")]),s._v(" "),n("p",[s._v("官方说法如下：\n同时父选择器标识符还有另外一种用法，你可以在父选择器之前添加选择器。举例来说，当用户在使用IE浏览器时，你会通过JavaScript在《body》标签上添加一个ie的类名，为这种情况编写特殊的样式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#content aside {\n  color: red;\n  body.ie & { color: green }\n}\n /* 编译后 */\n #content aside {color: red};\nbody.ie #content aside { color: green }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"组合器：-、-和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合器：-、-和"}},[s._v("#")]),s._v(" 组合器：>、+和~")]),s._v(" "),n("blockquote",[n("p",[s._v("子组合选择器>选择一个元素的直接子元素。上例中，第一个选择器会选择article下的所有命中section选择器的元素。第二个选择器只会选择article下紧跟着的子元素中命中section选择器的元素。例子如下：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("article section { margin: 5px }\narticle > section { border: 1px solid #ccc }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("blockquote",[n("p",[s._v("同层相邻组合选择器+选择header元素后紧跟的p元素，例子如下：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("header + p { font-size: 1.1em }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("blockquote",[n("p",[s._v("同层全体组合选择器~，选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("article ~ article { border-top: 1px dashed #ccc }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"sass的引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sass的引用"}},[s._v("#")]),s._v(" Sass的引用")]),s._v(" "),n("p",[s._v("和Css里的@import是一样的目的，但是Sass优化做的更好。")]),s._v(" "),n("p",[s._v("-----------未完待续-----------------")])])}),[],!1,null,null,null);a.default=t.exports}}]);